{
  "abstract" : [
    {
      "text" : "Tools to manage task creation and usage",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/TaskManagement"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "TinkoffConcurrency"
      }
    ],
    "role" : "collectionGroup",
    "title" : "Task Management"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "anchor" : "A-problem",
          "level" : 3,
          "text" : "A problem",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "While task creation and awaiting is easy, uncontrolled task creation can make testing much harder and slower. Consider",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the following example",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct MyEntity {",
            "    let someDependency: ISomeDependency",
            "",
            "    func doSomething() {",
            "        Task {",
            "            await someDependency.perform() ",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If we want to test whether ",
              "type" : "text"
            },
            {
              "code" : "someDependency.perform()",
              "type" : "codeVoice"
            },
            {
              "text" : " is invoked, we might write a following test",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func testMyEntity_someDependency_perform() {",
            "    \/\/ given",
            "    let someDependency = SomeDependencyMock()",
            "",
            "    let myEntity = MyEntity(someDependency: someDependency)",
            "",
            "    \/\/ when",
            "    myEntity.doSomething()",
            "",
            "    \/\/ then",
            "    XCTAssertTrue(someDependency.invokedPerform)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "But, this test would fail, because ",
              "type" : "text"
            },
            {
              "code" : "someDependency.perform()",
              "type" : "codeVoice"
            },
            {
              "text" : " is scheduled to be run on another thread,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and we must wait for task to complete. With current implementation, the only way to do that is to wait for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "some time to ensure that all scheduled tasks have finished. This way, we waste time just to wait uncontrolled",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "dependency to perform.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Solution",
          "level" : 3,
          "text" : "Solution",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Letâ€™s rewrite code above with one small change:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct MyEntity {",
            "    let taskFactory: ITCTaskFactory",
            "    let someDependency: ISomeDependency",
            "",
            "    func doSomething() {",
            "        taskFactory.task {",
            "            await someDependency.perform() ",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Then, a test would change to",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func testMyEntity_someDependency_perform() async {",
            "    \/\/ given",
            "    let taskFactory = TCTestTaskFactory()",
            "    let someDependency = SomeDependencyMock()",
            "",
            "    let myEntity = MyEntity(taskFactory: taskFactory, someDependency: someDependency)",
            "",
            "    \/\/ when",
            "    myEntity.doSomething()",
            "",
            "    await taskFactory.runUntilIdle()",
            "",
            "    \/\/ then",
            "    XCTAssertTrue(someDependency.invokedPerform)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "With this change, test will still run instantly, but internal task is guaranteed to be waited.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/ITCTaskFactory",
        "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/TCTaskFactory"
      ],
      "title" : "Task Factory"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/tinkoffconcurrency\/taskmanagement"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://TinkoffConcurrency/documentation/TinkoffConcurrency": {
  "abstract" : [
    {
      "text" : "TinkoffConcurrency is a set of tools that fill some gaps when integrating Swift Concurrency to your project.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "TinkoffConcurrency",
  "type" : "topic",
  "url" : "\/documentation\/tinkoffconcurrency"
},
"doc://TinkoffConcurrency/documentation/TinkoffConcurrency/ITCTaskFactory": {
  "abstract" : [
    {
      "text" : "Protocol for abstraction running asynchronous tasks.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ITCTaskFactory"
    }
  ],
  "identifier" : "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/ITCTaskFactory",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ITCTaskFactory"
    }
  ],
  "role" : "symbol",
  "title" : "ITCTaskFactory",
  "type" : "topic",
  "url" : "\/documentation\/tinkoffconcurrency\/itctaskfactory"
},
"doc://TinkoffConcurrency/documentation/TinkoffConcurrency/TCTaskFactory": {
  "abstract" : [
    {
      "text" : "Abstraction factory for running asynchronous tasks.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TCTaskFactory"
    }
  ],
  "identifier" : "doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/TCTaskFactory",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TCTaskFactory"
    }
  ],
  "role" : "symbol",
  "title" : "TCTaskFactory",
  "type" : "topic",
  "url" : "\/documentation\/tinkoffconcurrency\/tctaskfactory"
}
}
}